<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.hi_hello_spring.evaluation.query.mapper.TaskQueryMapper">

    <select id="findHrAllTask" resultType="TaskAllListQueryDTO">
        SELECT
        a.task_seq,
        a.department_seq,
        d.department_name,
        e.employee_seq,
        CASE
        WHEN a.task_type = 'PERSONER' THEN e.employee_name
        WHEN a.task_type = 'GROUP' THEN CAST(rt.group_rank AS CHAR)
        END AS display_name,
        a.task_content,
        t.template_seq,
        t.template_task_round
        FROM task a
        JOIN department d ON a.department_seq = d.department_seq
        JOIN employee e ON d.department_seq = e.department_seq
        LEFT JOIN (
        SELECT
        tg.task_seq,
        tg.task_group_seq,
        ROW_NUMBER() OVER (
        PARTITION BY tg.task_seq
        ORDER BY tg.task_group_seq
        ) AS group_rank
        FROM task_group tg
        WHERE tg.task_group_active_status = 1
        ) rt ON a.task_seq = rt.task_seq
        LEFT JOIN (
        SELECT
        os.employee_seq,
        t.template_seq,
        t.template_task_round
        FROM onboarding_status os
        JOIN template t ON os.template_seq = t.template_seq
        ) t ON e.employee_seq = t.employee_seq
    </select>
  
    <select id="findMentorAllTask" parameterType="java.lang.Long" resultType="TaskAllListQueryDTO">
        SELECT
        a.task_seq,
        a.department_seq,
        d.department_name,
        e.employee_seq,
        CASE
        WHEN a.task_type = 'PERSONER' THEN e.employee_name
        WHEN a.task_type = 'GROUP' THEN CAST(rt.group_rank AS CHAR)
        END AS display_name,
        a.task_content,
        t.template_seq,
        t.template_task_round
        FROM task a
        JOIN department d ON a.department_seq = d.department_seq
        JOIN employee e ON d.department_seq = e.department_seq
        LEFT JOIN (
        SELECT
        tg.task_seq,
        tg.task_group_seq,
        ROW_NUMBER() OVER (
        PARTITION BY tg.task_seq
        ORDER BY tg.task_group_seq
        ) AS group_rank
        FROM task_group tg
        WHERE tg.task_group_active_status = 1
        ) rt ON a.task_seq = rt.task_seq
        LEFT JOIN (
        SELECT
        os.employee_seq,
        t.template_seq,
        t.template_task_round
        FROM onboarding_status os
        JOIN template t ON os.template_seq = t.template_seq
        ) t ON e.employee_seq = t.employee_seq
        WHERE a.department_seq = (
        SELECT department_seq
        FROM employee
        WHERE employee_seq = #{employeeSeq}
        )
    </select>

    <select id="findMenteeTaskDetail" parameterType="java.util.Map" resultType="TaskMenteeDetailQueryDTO">

        SELECT
        a.task_seq,
        a.task_type,
        t.template_seq,
        t.template_title,
        t.template_url,
        a.task_content,
        d.department_name,
        t.template_end_at,
        e.employee_name AS mentor_name,
        mt.mentee_seq,
        em.mentee_name
        FROM task a
        JOIN department d
        ON a.department_seq = d.department_seq
        JOIN employee e
        ON d.department_seq = e.department_seq
        LEFT JOIN (
        SELECT
        m.mentor_seq,
        m.mentee_seq
        FROM mentoring m
        ) mt
        ON e.employee_seq = mt.mentor_seq
        LEFT JOIN (
        SELECT
        e.employee_seq AS mentee_seq,
        e.employee_name AS mentee_name
        FROM employee e
        ) em
        ON mt.mentee_seq = em.mentee_seq
        LEFT JOIN (
        SELECT
        os.employee_seq,
        t.template_seq,
        t.template_title,
        t.template_url,
        t.template_end_at
        FROM onboarding_status os
        JOIN template t
        ON os.template_seq = t.template_seq
        ) t
        ON em.mentee_seq = t.employee_seq
        WHERE e.employee_seq = #{employee_seq}
        AND a.task_seq = #{task_seq}
      
    </select>
</mapper>